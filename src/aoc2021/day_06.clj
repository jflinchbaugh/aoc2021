(ns aoc2021.day-06
  (:require [aoc2021.core :refer :all]
            [clojure.string :as str]))

(def input "4,1,4,1,3,3,1,4,3,3,2,1,1,3,5,1,3,5,2,5,1,5,5,1,3,2,5,3,1,3,4,2,3,2,3,3,2,1,5,4,1,1,1,2,1,4,4,4,2,1,2,1,5,1,5,1,2,1,4,4,5,3,3,4,1,4,4,2,1,4,4,3,5,2,5,4,1,5,1,1,1,4,5,3,4,3,4,2,2,2,2,4,5,3,5,2,4,2,3,4,1,4,4,1,4,5,3,4,2,2,2,4,3,3,3,3,4,2,1,2,5,5,3,2,3,5,5,5,4,4,5,5,4,3,4,1,5,1,3,4,4,1,3,1,3,1,1,2,4,5,3,1,2,4,3,3,5,4,4,5,4,1,3,1,1,4,4,4,4,3,4,3,1,4,5,1,2,4,3,5,1,1,2,1,1,5,4,2,1,5,4,5,2,4,4,1,5,2,2,5,3,3,2,3,1,5,5,5,4,3,1,1,5,1,4,5,2,1,3,1,2,4,4,1,1,2,5,3,1,5,2,4,5,1,2,3,1,2,2,1,2,2,1,4,1,3,4,2,1,1,5,4,1,5,4,4,3,1,3,3,1,1,3,3,4,2,3,4,2,3,1,4,1,5,3,1,1,5,3,2,3,5,1,3,1,1,3,5,1,5,1,1,3,1,1,1,1,3,3,1")

(defn next-counts [counts]
  {0 (get counts 1 0)
   1 (get counts 2 0)
   2 (get counts 3 0)
   3 (get counts 4 0)
   4 (get counts 5 0)
   5 (get counts 6 0)
   6 (+ (get counts 0 0) (get counts 7 0))
   7 (get counts 8 0)
   8 (get counts 0 0)})

(defn solve [day]
  (->>
    (str/split input #",")
    (map parse-long)
    sort
    (group-by identity )
    (map (fn [[k v]] [k (count v)]))
    (into {})
    (iterate next-counts)
    (take (inc day))
    last
    vals
    (reduce +)))

(defn part-1 []
  (solve 80))

(defn part-2 []
  (solve 256))

(comment

  (part-1);; => 350149

  (part-2);; => 1590327954513

  .)
